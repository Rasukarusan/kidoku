generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model sheets {
  id      Int       @id @default(autoincrement()) @db.UnsignedInt
  userId  String    @map("user_id")
  name    String    @db.VarChar(120)
  order   Int?      @default(1)
  created DateTime? @default(now()) @db.DateTime(0)
  updated DateTime? @default(now()) @db.DateTime(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name], map: "uniq_user_id_name")
}

model books {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  userId     String   @map("user_id")
  sheet_id   Int
  title      String   @db.VarChar(120)
  author     String   @db.VarChar(120)
  category   String   @db.VarChar(120)
  image      String   @db.VarChar(255)
  impression String   @db.VarChar(5)
  memo       String   @db.Text
  finished   DateTime @db.DateTime(0)
  created    DateTime @default(now()) @db.DateTime(0)
  updated    DateTime @default(now()) @db.DateTime(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  sheets        sheets[]
  books         books[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
